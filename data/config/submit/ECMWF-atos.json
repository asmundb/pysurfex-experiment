{
  "submit_types": ["background", "serial", "parallel"],
  "default_submit_type": "serial",
  "background": {
    "SCHOST": "localhost",
    "ENV": {
       "MODULE_UDUNITS": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'udunits'); os.environ['LD_LIBRARY_PATH']=os.environ.get('UDUNITS_DIR') + '/lib/'",
       "MODULE_PROJ": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'proj/7.2.1')"
    },
    "tasks": [
      "Background", "Dummy"
    ]
  },
  "serial": {
    "SCHOST": "hpc",
    "ENV": {
       "MODULE_UDUNITS": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'udunits'); os.environ['LD_LIBRARY_PATH']=os.environ.get('UDUNITS_DIR') + '/lib/'",
       "MODULE_PROJ": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'proj/7.2.1')"
    },
    "HOST": "0",
    "BATCH": {
       "WALLTIME": "#SBATCH --time=00:05:00"
    }
  },
  "parallel": {
    "SCHOST": "hpc",
    "ENV": {
       "MODULE_UDUNITS": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'udunits'); os.environ['LD_LIBRARY_PATH']=os.environ.get('UDUNITS_DIR') + '/lib/'",
       "MODULE_PROJ": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'proj/7.2.1')",
       "OPENMPI1": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'openmpi')"
    },
    "BATCH": {
       "WALLTIME": "#SBATCH --time=00:10:00"
    },
    "tasks": [
      "Forecast", "PerturbedRun", "Pgd", "Prep", "Soda"
    ]
  },
  "task_exceptions": {
    "MakeOfflineBinaries": {
      "ENV": {
        "OPENMPI0": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'prgenv/gnu')",
        "OPENMPI1": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'openmpi')",
        "ECCODES": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'ecmwf-toolbox')",
        "NETCDF": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'netcdf4')",
        "WALLTIME": "#SBATCH --time=00:20:00"
      }
    },
    "CMakeBuild": {
      "ENV": {
        "OPENMPI0": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'prgenv/gnu')",
        "OPENMPI1": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'openmpi')",
        "ECCODES": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'ecmwf-toolbox')",
        "NETCDF": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'netcdf4')",
        "WALLTIME": "#SBATCH --time=00:20:00"
      }
    },
    "Forecast": {
       "BATCH": {
          "WALLTIME": "#SBATCH --time=00:15:00",
          "MEMORY": "#SBATCH --mem=10G"
       },
       "ENV": {
          "MODULE": "print('My beautiful module')"
       }
    },
    "QualityControl": {
      "ENV": {
        "ECCODES": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'ecmwf-toolbox')"
      }
    },
    "Forcing":{
       "ENV":{
        "EPYGRAM": "import sys; sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13/epygram'); sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13/site'); sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13')",
        "ECCODES": "exec(open('/usr/local/apps/lmod/8.6.8/init/env_modules_python.py').read()); module('load', 'ecmwf-toolbox')"
      }
    },
    "ModifyForcing":{
       "ENV":{
        "epygram": "import sys; sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13/epygram'); sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13/site'); sys.path.insert(0, '/perm/hlam/apps/epygram/1.4.13')"
      }
    },
    "ExternalAssim": {
      "BATCH": {
         "WALLTIME": "#SBATCH --time=00:05:00",
         "MEMORY": "#SBATCH --mem=15G"
       }
    }
  }
}
